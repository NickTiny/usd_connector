import bpy
from pathlib import Path

# Make `pxr` module available, for running as `bpy` PIP package.
bpy.utils.expose_bundled_modules()

from pxr import Usd, UsdGeom
from typing import List

def get_datablock_from_prim(blender_prim: Usd.Prim) -> dict:
    if blender_prim.HasProperty("userProperties:blender:object_name"):
        name = blender_prim.GetProperty("userProperties:blender:object_name").Get()
        return bpy.data.objects.get(name)


def has_source_prim(blender_prim: Usd.Prim, source_stage: Usd.Stage) -> bool:
    """Check if the given Blender prim has a corresponding source prim in the source stage.

    Args:
        blender_prim (Usd.Prim): Prim Exported by Blender
        source_stage (Usd.Stage): Source USD Stage

    Returns:
        bool: True if the source prim exists, False otherwise
    """
    bl_data_block = get_datablock_from_prim(blender_prim)
    if bl_data_block and hasattr(bl_data_block, "usd_connect_props"):
        source_prim_path = bl_data_block.usd_connect_props.prim_path
        source_prim = source_stage.GetPrimAtPath(source_prim_path)
        if source_prim and source_prim.IsValid():
            return source_prim
    return False

def get_all_prims(stage:Usd.Stage) -> List[Usd.Prim]:
    """Get all prims in the stage, except for those autogenerated by Blender like "root".

    Args:
        stage (Usd.Stage): The USD stage to traverse.

    Returns:
        List[Usd.Prim]: A list of all non-generated prims in the stage.
    """
     # Filter out prims autogenerated by Blender like "root"
    all_prims : List[Usd.Prim] = []
    for bl_prim in stage.Traverse():
        if bl_prim.HasCustomDataKey("Blender"):
            if bl_prim.GetCustomDataByKey("Blender")["generated"] == True:
                continue
        all_prims.append(bl_prim)
    return all_prims


def get_matching_prims(source_stage:Usd.Stage, blender_prims:List[Usd.Prim]) -> dict[Usd.Prim, Usd.Prim]:
    """Get a mapping of matching prims between the source stage and Blender exported prims.

    Args:
        source_stage (Usd.Stage): The source USD stage to compare against.
        blender_prims (List[Usd.Prim]): The list of Blender exported prims.

    Returns:
        dict[Usd.Prim, Usd.Prim]: A mapping of matching prims between the source stage and Blender exported prims.
    """
    # Find all prims that match a path in the source stage
    matched_blender_prims: dict[Usd.Prim, Usd.Prim] = {}

    for bl_prim in blender_prims:
        # Find matching prim in source stage
        source_prim = has_source_prim(bl_prim, source_stage)
        if source_prim:
            matched_blender_prims[bl_prim] = source_prim

    return matched_blender_prims    


def override_prim_attributes(
    blender_prim: Usd.Prim, source_prim: Usd.Prim, override_stage: Usd.Stage
) -> None:
    """Override the attribute of a prim in the override stage if it differs from the source stage.

    Args:
        blender_prim (Usd.Prim): The Blender exported prim.
        source_prim (Usd.Prim): The source prim to compare against.
        override_stage (Usd.Stage): The override stage to apply changes to.
    """
    # TODO Handle in a more generic way and support other attributes
    # This is good for demo purposes, but not a general solution

    for attr in blender_prim.GetAttributes():
        # If Attribute exists on source prim and value is different, override it
        if source_prim.HasAttribute(attr.GetName()):
            if source_prim.GetAttribute(attr.GetName()).Get() != attr.Get():
                override_prim = override_stage.OverridePrim(source_prim.GetPath())
                override_prim.GetAttribute(attr.GetName()).Set(attr.Get())
                print(
                    f"Overriding attribute {attr.GetName()} on prim {source_prim.GetPath()}"
                )
        else:
            override_prim = override_stage.OverridePrim(source_prim.GetPath())
            # Attribute doesn't exist on source prim, add it
            override_prim.CreateAttribute(attr.GetName(), attr.GetTypeName()).Set(
                attr.Get()
            )
            print(
                f"Adding new attribute {attr.GetName()} on prim {source_prim.GetPath()}"
            )


def get_unmatched_prims(blender_prims:List[Usd.Prim], matched_blender_prims:dict[Usd.Prim, Usd.Prim]) -> List[Usd.Prim]:
    """Get a list of unmatched Blender prims.

    Args:
        blender_prims (List[Usd.Prim]): List of Blender exported prims.
        matched_blender_prims (dict[Usd.Prim, Usd.Prim]): A mapping of matching prims between Blender exported prims as keys and source prim as values.

    Returns:
        List[Usd.Prim]: A list of unmatched Blender prims.
    """
    return list(set(blender_prims) - set(matched_blender_prims.keys()))


def generate_usd_overrides_for_prims(source_stage:Usd.Stage, override_stage:Usd.Stage, bl_stage:Usd.Stage) -> None:
    # Filter out prims autogenerated by Blender like "root"
    blender_prims = get_all_prims(bl_stage)

    # Collect all the relevant prims
    matched_prims = get_matching_prims(source_stage, blender_prims)
    unmatched_prims = get_unmatched_prims(blender_prims, matched_prims)

    # Figure out if prims have been modified
    for bl_prim, src_prim in matched_prims.items():
        # check_matching_prims(bl_prim, src_prim)
        override_prim_attributes(bl_prim, src_prim, override_stage)

    for unmatched in unmatched_prims:
        print(f"Skipping Unmatched prim: {unmatched.GetPath()}")

def generate_usd_override_file(bl_stage: Usd.Stage) -> None:
    # Create Stage to Generate Overrides onto
    bl_stage_path = Path(bl_stage.GetRootLayer().realPath)
    override_stage_path = bl_stage_path.parent.joinpath(
        "layer_" + bl_stage_path.name
    ).as_posix()
    override_stage = Usd.Stage.CreateNew(override_stage_path)

    for library in bpy.context.scene.usd_connect_libraries:
        # Add reference to source stage in override file
        source_stage = Usd.Stage.Open(library.file_path)
        source_stage_path = Path(source_stage.GetRootLayer().realPath).as_posix()
        override_stage.GetRootLayer().subLayerPaths.append(source_stage_path)

        generate_usd_overrides_for_prims(   
            source_stage=source_stage,
            override_stage=override_stage,
            bl_stage=bl_stage,
        )

    override_stage.Save()
